=head1 NAME

File::Find::Object::Rule::Extending - the mini-guide to extending File::Find::Object::Rule

=head1 SYNOPSIS

    package File::Find::Object::Rule::Random;

    use strict;
    use warnings;

    # take useful things from File::Find::Object::Rule
    use base 'File::Find::Object::Rule';

    # and force our crack into the main namespace
    sub File::Find::Object::Rule::random () {
        my $self = shift()->_force_object;
        $self->exec( sub { rand > 0.5 } );
    }

    1;

=head1 DESCRIPTION

L<File::Find::Object::Rule> inherits L<File::Find::Rule>'s extensibility. It
is now possibile to extend it, using the following conventions.

=head2 Declare your package

    package File::Find::Object::Rule::Random;

    use strict;
    use warnings;

=head2 Inherit methods from File::Find::Object::Rule

    # take useful things from File::Find::Object::Rule
    use base 'File::Find::Object::Rule';

=head3 Force your madness into the main package

    # and force our crack into the main namespace
    sub File::Find::Object::Rule::random () {
        my $self = shift()->_force_object;
        $self->exec( sub { rand > 0.5 } );
    }

Yes, we're being very cavalier here and defining things into the main
File::Find::Object::Rule namespace.  This is due to lack of imaginiation on my
part - I simply can't find a way for the functional and oo interface
to work without doing this or some kind of inheritance, and
inheritance stops you using two File::Find::Object::Rule::Foo modules
together.

For this reason try and pick distinct names for your extensions.  If
this becomes a problem then I may institute a semi-official registry
of taken names.

=head2 Taking no arguments.

Note the null prototype on random.  This is a cheat for the procedural
interface to know that your sub takes no arguments, and so allows this
to happen:

 find( random => in => '.' );

If you hadn't declared C<random> with a null prototype it would have
consumed C<in> as a parameter to it, then got all confused as it
doesn't know about a C<'.'> rule.

=head1 NOTES ABOUT THE CALLBACK

The callback can access the L<File::Find::Object::Result> using
C<<< $self->finder->item_obj() >>>.

=head1 AUTHOR

Richard Clamp <richardc@unixbeard.net>

=head1 COPYRIGHT

Copyright (C) 2002 Richard Clamp.  All Rights Reserved.

This module is free software; you can redistribute it and/or modify it
under the same terms as Perl itself.

=head1 SEE ALSO

L<File::Find::Object::Rule>

L<File::Find::::Rule::MMagic> was the first extension module for
L<File::Find::Rule>, so maybe check that out.

=cut
